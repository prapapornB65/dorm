// Register_page.dart
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import 'package:flutter_application_1/auth/login_page.dart';
import 'package:flutter_application_1/config/api_config.dart' show apiBaseUrl;

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});
  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  // --------- FORM ---------
  final _formKey = GlobalKey<FormState>();

  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();
  final _phoneController = TextEditingController();
  final _citizenIdController = TextEditingController();
  final _roomNumberController = TextEditingController();

  // (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö owner)
  final _apiKeyController = TextEditingController();
  final _projectIdController = TextEditingController();

  String _selectedRole = 'tenant';
  bool _isLoading = false;
  String? _errorMessage;

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _usernameController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    _phoneController.dispose();
    _citizenIdController.dispose();
    _roomNumberController.dispose();
    _apiKeyController.dispose();
    _projectIdController.dispose();
    super.dispose();
  }

  // --------- VALIDATION ---------
  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    if (!emailRegex.hasMatch(value)) return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    return null;
  }

  String? _validatePassword(String? value) {
    if (value == null || value.isEmpty) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
    if (value.length < 8) return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
    return null;
  }

  String? _validateConfirmPassword(String? value) {
    if (value == null || value.isEmpty) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô';
    if (value != _passwordController.text) return '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô';
    return null;
  }

  (String first, String last) _splitFullName(String full) {
    final parts = full.trim().split(RegExp(r'\s+'));
    if (parts.isEmpty) return ('', '');
    final first = parts.first;
    final last = parts.length > 1 ? parts.sublist(1).join(' ') : '';
    return (first, last);
  }

  Map<String, dynamic> _safeJson(String body) {
    try {
      final j = jsonDecode(body);
      return j is Map<String, dynamic> ? j : {};
    } catch (_) {
      return {};
    }
  }

  Future<void> _register() async {
    if (_isLoading) return;
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    final email = _emailController.text.trim();
    final fullName = _nameController.text.trim();
    final parts = fullName.split(RegExp(r'\s+'));
    final firstName = parts.isNotEmpty ? parts.first : '';
    final lastName = parts.length > 1 ? parts.sublist(1).join(' ') : '';

    try {
      http.Response resp;

      if (_selectedRole == 'tenant') {
        // üéØ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤: ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase, ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password)
        final body = {
          'firstName': firstName,
          'lastName': lastName,
          'citizenID': _citizenIdController.text.trim(), // ‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô
          'email': email.toLowerCase(),
          'phone': _phoneController.text.trim(), // ‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô
          'username': _usernameController.text.trim().isEmpty
              ? null
              : _usernameController.text.trim(),
          'roomNumber': _roomNumberController.text
              .trim()
              .toUpperCase(), // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤)
          'password': _passwordController.text.trim(), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
        };

        resp = await http
            .post(
              Uri.parse('$apiBaseUrl/api/tenant/register'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode(body),
            )
            .timeout(const Duration(seconds: 20));

        if (resp.statusCode != 200 && resp.statusCode != 201) {
          setState(() => _errorMessage =
              '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${resp.statusCode}) ${resp.body}');
          return;
        }

        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')),
        );
        Navigator.pushReplacement(
            context, MaterialPageRoute(builder: (_) => LoginPage()));
        return;
      }

      if (_selectedRole == 'owner') {
        // üëë ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà /api/owner/register (backend ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase ‡πÉ‡∏´‡πâ)
        final body = {
          'firstName': firstName,
          'lastName': lastName,
          'email': email.toLowerCase(),
          'phone': _phoneController.text.trim(),
          'citizenId': _citizenIdController.text.trim(),
          'username': _usernameController.text.trim().isEmpty
              ? null
              : _usernameController.text.trim(),
          'password': _passwordController.text.trim(), // owner ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
          'apiKey': _apiKeyController.text.trim(),
          'projectId': _projectIdController.text.trim(),
        };

        resp = await http
            .post(
              Uri.parse('$apiBaseUrl/api/owner/register'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode(body),
            )
            .timeout(const Duration(seconds: 20));

        if (resp.statusCode != 200 && resp.statusCode != 201) {
          setState(() => _errorMessage =
              '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${resp.statusCode}) ${resp.body}');
          return;
        }

        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à')),
        );
        Navigator.pushReplacement(
            context, MaterialPageRoute(builder: (_) => LoginPage()));
        return;
      }

      // üîí admin: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏ô‡∏µ‡πâ
      setState(
          () => _errorMessage = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
    } catch (e) {
      if (mounted) setState(() => _errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    } finally {
      if (mounted) setState(() => _isLoading = false);
    }
  }

  // ---------- UI (DESIGN) ----------
  static const Color _gStart = Color(0xFF0F6B54);
  static const Color _gEnd = Color(0xFF57D2A3);
  static const Color _textPrimary = Color(0xFF10443B);
  static const Color _textSecondary = Color(0xFF6A8F86);

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final cardWidth = size.width.clamp(320.0, 520.0);

    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [_gStart, _gEnd],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
              child: Container(
                width: cardWidth,
                padding: const EdgeInsets.fromLTRB(24, 28, 24, 22),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF0F6B54), Color(0xFF2FB78F)],
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                  ),
                  borderRadius: BorderRadius.circular(36),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0x33000000),
                      offset: Offset(0, 10),
                      blurRadius: 30,
                    ),
                  ],
                ),
                child: Form(
                  key: _formKey,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Stack(
                        alignment: Alignment.center,
                        children: [
                          _ring(96),
                          _ring(66),
                          _ring(40),
                          const Icon(Icons.person_add_alt_1,
                              color: Colors.white, size: 36),
                        ],
                      ),
                      const SizedBox(height: 14),
                      const Text(
                        '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 24,
                          fontWeight: FontWeight.w900,
                          letterSpacing: 0.3,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Text(
                        _selectedRole == 'tenant'
                            ? '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ (‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)'
                            : _selectedRole == 'owner'
                                ? '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å (‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)'
                                : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.9),
                          height: 1.25,
                        ),
                      ),
                      const SizedBox(height: 22),

                      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
                      _pillField(
                        child: DropdownButtonHideUnderline(
                          child: DropdownButtonFormField<String>(
                            value: _selectedRole,
                            decoration: _pillDecoration(
                              hint: '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                              icon: Icons.badge_outlined,
                            ),
                            items: const [
                              DropdownMenuItem(
                                  value: 'tenant', child: Text('‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤')),
                              DropdownMenuItem(
                                  value: 'owner', child: Text('‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏û‡∏±‡∏Å')),
                              DropdownMenuItem(
                                  value: 'admin', child: Text('‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö')),
                            ],
                            onChanged: (v) {
                              if (v != null) setState(() => _selectedRole = v);
                            },
                          ),
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                      _pillField(
                        child: TextFormField(
                          controller: _nameController,
                          decoration: _pillDecoration(
                            hint: '‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
                            icon: Icons.person,
                          ),
                          validator: (v) {
                            if (v == null || v.trim().isEmpty) {
                              return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
                            }
                            final parts = v.trim().split(RegExp(r'\s+'));
                            if (parts.length < 2) {
                              return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
                            }
                            return null;
                          },
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)
                      _pillField(
                        child: TextFormField(
                          controller: _usernameController,
                          decoration: _pillDecoration(
                            hint: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
                            icon: Icons.person_outline,
                          ),
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                      _pillField(
                        child: TextFormField(
                          controller: _emailController,
                          keyboardType: TextInputType.emailAddress,
                          decoration: _pillDecoration(
                            hint: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
                            icon: Icons.alternate_email,
                          ),
                          validator: _validateEmail,
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)
                      _pillField(
                        child: TextFormField(
                          controller: _phoneController,
                          keyboardType: TextInputType.phone,
                          decoration: _pillDecoration(
                            hint: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
                            icon: Icons.phone,
                          ),
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)
                      _pillField(
                        child: TextFormField(
                          controller: _citizenIdController,
                          keyboardType: TextInputType.number,
                          decoration: _pillDecoration(
                            hint: '‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
                            icon: Icons.credit_card,
                          ),
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤)
                      if (_selectedRole == 'tenant') ...[
                        _pillField(
                          child: TextFormField(
                            controller: _roomNumberController,
                            decoration: _pillDecoration(
                              hint: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å',
                              icon: Icons.meeting_room_outlined,
                            ),
                            validator: (v) => (v == null || v.isEmpty)
                                ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å'
                                : null,
                          ),
                        ),
                        const SizedBox(height: 12),
                      ],

                      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: ApiKey/ProjectID (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô)
                      if (_selectedRole == 'owner') ...[
                        _pillField(
                          child: TextFormField(
                            controller: _apiKeyController,
                            decoration: _pillDecoration(
                              hint: 'Tuya Api Key',
                              icon: Icons.vpn_key,
                            ),
                          ),
                        ),
                        const SizedBox(height: 12),
                        _pillField(
                          child: TextFormField(
                            controller: _projectIdController,
                            decoration: _pillDecoration(
                              hint: 'Tuya Project ID',
                              icon: Icons.settings_applications,
                            ),
                          ),
                        ),
                        const SizedBox(height: 12),
                      ],

                      // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                      _pillField(
                        child: TextFormField(
                          controller: _passwordController,
                          obscureText: true,
                          decoration: _pillDecoration(
                            hint: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)',
                            icon: Icons.lock_outline,
                          ),
                          validator: _validatePassword,
                        ),
                      ),
                      const SizedBox(height: 12),

                      // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                      _pillField(
                        child: TextFormField(
                          controller: _confirmPasswordController,
                          obscureText: true,
                          decoration: _pillDecoration(
                            hint: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
                            icon: Icons.lock_reset,
                          ),
                          validator: _validateConfirmPassword,
                        ),
                      ),

                      const SizedBox(height: 8),
                      if (_errorMessage != null) ...[
                        Text(
                          _errorMessage!,
                          style: const TextStyle(color: Colors.red),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 8),
                      ],
                      const SizedBox(height: 12),

                      // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
                      SizedBox(
                        width: double.infinity,
                        height: 48,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFFFF6B6B),
                            foregroundColor: Colors.white,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(28),
                            ),
                            elevation: 0,
                          ),
                          onPressed: _isLoading ? null : _register,
                          child: Stack(
                            alignment: Alignment.center,
                            children: [
                              Opacity(
                                opacity: _isLoading ? 0.0 : 1.0,
                                child: const Text(
                                  '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
                                  style: TextStyle(
                                    fontWeight: FontWeight.w800,
                                    letterSpacing: 0.2,
                                  ),
                                ),
                              ),
                              if (_isLoading)
                                const SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2.2,
                                    valueColor:
                                        AlwaysStoppedAnimation(Colors.white),
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 10),

                      // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
                      TextButton(
                        onPressed: () {
                          Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(builder: (_) => LoginPage()),
                          );
                        },
                        child: Text(
                          '‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.95),
                            decoration: TextDecoration.underline,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  // -------- UI helpers --------
  Widget _ring(double size) {
    return Container(
      width: size,
      height: size,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: Colors.white.withOpacity(0.25),
          width: 2,
        ),
      ),
    );
  }

  Widget _pillField({required Widget child}) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(26),
        boxShadow: const [
          BoxShadow(
            color: Color(0x14000000),
            blurRadius: 12,
            offset: Offset(0, 4),
          ),
        ],
      ),
      padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 2),
      child: child,
    );
  }

  InputDecoration _pillDecoration({
    required String hint,
    required IconData icon,
    Widget? trailing,
  }) {
    return InputDecoration(
      hintText: hint,
      hintStyle: const TextStyle(color: _textSecondary),
      prefixIcon: Icon(icon, color: _textSecondary),
      suffixIcon: trailing,
      border: InputBorder.none,
      focusedBorder: InputBorder.none,
      enabledBorder: InputBorder.none,
      contentPadding: const EdgeInsets.symmetric(vertical: 14),
    );
  }
}
