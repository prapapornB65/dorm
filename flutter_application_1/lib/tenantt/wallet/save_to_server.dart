// save_to_server.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import 'package:flutter_application_1/config/api_config.dart';

class SaveResult {
  final bool ok;
  final String message;
  final int statusCode;
  final int? paymentId;
  final int? slipId;

  const SaveResult({
    required this.ok,
    required this.message,
    required this.statusCode,
    this.paymentId,
    this.slipId,
  });

  @override
  String toString() =>
      'SaveResult(ok=$ok, code=$statusCode, paymentId=$paymentId, slipId=$slipId, msg="$message")';
}

Future<SaveResult> saveSlipToServer({
  required int tenantId,
  required String tenantName, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏°‡πâ backend ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ
  required String roomNumber,
  required String imagePath,
  required String senderName,
  required String bank,       // ‡∏™‡πà‡∏á "‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"
  required int amount,
  required DateTime datetime,
  String? note,
  int? paymentId,
  String status = "verified", // ‚úÖ default ‡πÄ‡∏õ‡πá‡∏ô "verified"
}) async {
  final url = Uri.parse('$apiBaseUrl/api/slipupload/$tenantId');

  final bodyMap = <String, dynamic>{
    "RoomNumber": roomNumber,
    "ImagePath": imagePath,
    "SenderName": senderName,
    if (note != null) "Note": note,
    "UploadDate": datetime.toIso8601String(),
    "amount": amount,
    "bank": bank,
    "status": status,
    if (paymentId != null) "paymentId": paymentId,
  };

  if (kDebugMode) {
    debugPrint("üì§ [saveSlipToServer] POST $url");
    debugPrint("üìù payload: ${jsonEncode(bodyMap)}");
  }

  const int maxRetry = 2; // ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å + 2 retry)
  for (int attempt = 0; attempt <= maxRetry; attempt++) {
    final tryNo = attempt + 1;
    try {
      final res = await http
          .post(
            url,
            body: jsonEncode(bodyMap),
            headers: const {
              "Content-Type": "application/json",
              "Accept": "application/json",
            },
          )
          .timeout(const Duration(seconds: 12));

      final code = res.statusCode;
      final body = res.body;

      if (kDebugMode) {
        debugPrint("üì• [saveSlipToServer] attempt=$tryNo status=$code");
        debugPrint("üìÑ [saveSlipToServer] body=$body");
      }

      Map<String, dynamic>? decoded;
      try {
        if (body.isNotEmpty) {
          final d = jsonDecode(body);
          if (d is Map<String, dynamic>) decoded = d;
        }
      } catch (_) {/* ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô */}

      // ‡∏Å‡∏£‡∏ì‡∏µ 2xx ‡πÅ‡∏ï‡πà‡∏ù‡∏±‡πà‡∏á server ‡∏™‡πà‡∏á ok=false ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ error
      if (code >= 200 && code < 300) {
        final bool okFlag = (decoded?['ok'] == true) || (decoded?['error'] == false);
        final serverMsg = (decoded?['message']?.toString() ?? "OK");
        final pid = (decoded?['paymentId'] is num) ? (decoded?['paymentId'] as num).toInt() : null;
        final sid = (decoded?['slipId'] is num) ? (decoded?['slipId'] as num).toInt() : null;

        if (!okFlag) {
          // server ‡∏ï‡∏≠‡∏ö 200 ‡πÅ‡∏ï‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
          return SaveResult(ok: false, message: serverMsg, statusCode: code);
        }

        return SaveResult(
          ok: true,
          message: serverMsg,
          statusCode: code,
          paymentId: pid,
          slipId: sid,
        );
      }

      // 4xx/5xx
      String serverMsg = "HTTP $code";
      if (decoded != null) {
        serverMsg = decoded?['message']?.toString() ??
            decoded?['error']?.toString() ??
            serverMsg;
      }

      // retry ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 5xx
      if (code >= 500 && attempt < maxRetry) {
        if (kDebugMode) {
          debugPrint("üîÅ [saveSlipToServer] retry on 5xx (attempt=$tryNo)");
        }
        await Future.delayed(const Duration(milliseconds: 600));
        continue;
      }
      return SaveResult(ok: false, message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $serverMsg", statusCode: code);

    } on TimeoutException catch (e) {
      if (kDebugMode) {
        debugPrint("‚è≥ [saveSlipToServer] timeout (attempt=$tryNo): $e");
      }
      if (attempt < maxRetry) {
        await Future.delayed(const Duration(milliseconds: 600));
        continue;
      }
      return const SaveResult(
        ok: false,
        message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
        statusCode: 0,
      );

    } on SocketException catch (e) {
      if (kDebugMode) {
        debugPrint("üåê [saveSlipToServer] socket error (attempt=$tryNo): $e");
      }
      if (attempt < maxRetry) {
        await Future.delayed(const Duration(milliseconds: 600));
        continue;
      }
      return SaveResult(
        ok: false,
        message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ($e)",
        statusCode: 0,
      );

    } catch (e) {
      if (kDebugMode) {
        debugPrint("üõë [saveSlipToServer] unexpected error: $e");
      }
      // ‡∏ö‡∏±‡πä‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏õ/serialization ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ retry
      return SaveResult(
        ok: false,
        message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e",
        statusCode: 0,
      );
    }
  }

  // ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  return const SaveResult(
    ok: false,
    message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏",
    statusCode: 0,
  );
}
